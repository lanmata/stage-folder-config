#IMPORTANT: This is the latest version
app:
    name: prx-backbone-rest
    version: 1.0.1.20200713-01
#<><><><><><><><><><><><><><> HTTPS <><><><><><><><><><><><><><>
server:
    port: 8084
    http2:
        enabled: true
    ssl:
        enabled: true
        key-store: prx_backbone_rest.jks
        key-store-password: prx-backbone-rest
        key-store-type: JKS
        key-alias: prx-backbone-rest
spring:
    main:
        allow-bean-definition-overriding: true
        banner-mode: console
    application:
        name: ${app.name}
        description: Servicio de integracion
    cloud:
        inetutils:
            ignoredInterfaces:
                - docker
                - eth.*
                - lo
            preferredNetworks:
                - 172.18.0
    output:
        ansi:
            enabled: DETECT
    jmx:
        default-domain: prx-backoffice-rest
    data:
        rest:
            base-path: /api
    #<><><><><><><><><><><><><><> BASE DE DATOS <><><><><><><><><><><><><><>
    datasource:
        driver-class-name: org.postgresql.Driver
        url: jdbc:postgresql://${postgres.service.url}:5432/${postgres.service.database}
        username: ${postgres.service.username}
        password: ${postgres.service.password}
        #<><><><><><><><><><><><><><> POOL DE CONEXIONES A BASE DE DATOS <><><><><><><><><><><><><><>
        hikari:
            minimumIdle: 1
            maximumPoolSize: 1
            idleTimeout: 15000
            poolName: SpringBootJPAHikariCPbackbone
            maxLifetime: 1800000
            connectionTimeout: 30000
    #<><><><><><><><><><><><><><> PERSISTENCIA <><><><><><><><><><><><><><>
    jpa:
        hibernate.ddl-auto: none
        show-sql: false
        open-in-view: false
        database: POSTGRESQL
        database-platform: org.hibernate.dialect.PostgreSQL9Dialect
        properties:
            hibernate:
                jdbc:
                    lob.non_contextual_creation: true
        log-level: error
#<><><><><><><><><><><><><><> HTTPS PARA BASE DE DATOS <><><><><><><><><><><><><><>
postgres:
    service:
        url: postgresql
        name: postgres
        database: PRX
        username: usr_genweb
        password: UsU075qjjgCtdWxS3rxgjwCoCmWjdQ1FrhBYapZs
#<><><><><><><><><><><><><><> SERVICE DISCOVERY <><><><><><><><><><><><><><>
eureka:
    client:
        url: backbone-service-monitor
        port: 8763
        register-with-eureka: true
        enable: true
        healtcheck: true
        serviceUrl:
            defaultZone: https://${eureka.client.url}:${eureka.client.port}/eureka/
    instance:
        leaseRenewalIntervalInSeconds: 30
        hostName: qa.prx.test
        preferIpAddress: true
        status-page-url-path: https://${eureka.instance.hostName}:${server.port}/actuator/info
        health-check-url: https://${eureka.instance.hostName}:${server.port}/actuator/health
        home-page-url: https://${eureka.instance.hostName}:${server.port}/
        port: ${server.port}
debug: false
#<><><><><><><><><><><><><><> HTPS <><><><><><><><><><><><><><>
security:
    #    - basicAuth: ["lmata:123456"]  # <-- use the same name here
    discovery:
        client:
            name: prx-backbone-rest
            trust-store-file: prx_backbone_rest_discovery.jks
            trust-store-password: prx-backbone-rest
            max-total-connections: 10
            max-connections-per-host: 10
components:
    securitySchemes:
        basicAuth:     # <-- arbitrary name for the security scheme
            type: http
            scheme: basic
#<><><><><><><><><><><><><><> KEYCLOAK <><><><><><><><><><><><><><>
keycloak:
    enabled: true
    realm: prx-access-validator
    auth-server-url: https://qa.prx.test/auth/
    ssl-required: external
    resource: prx-services
    bearer-only: true
    use-resource-role-mappings: true
    public-client: true
    confidential-port: 0
    disable-trust-manager: true
    security-constraints:
        - authRoles:
              - rservice-rest
        - securityCollections:
              - patterns: '/v1/*'
              - name: prx-services
#<><><><><><><><><><><><><><> SWAGGER <><><><><><><><><><><><><><>
swagger:
    base-package: 'com.prx.backoffice.controller'
api-info:
    title: 'PRX Backbone REST'
    description: 'Servicios para la gestion de las entidades del sistema'
    contact:
        name: 'Luis Antonio Mata'
        url: 'www.qa.prx.test'
        email: 'luis.antonio.mata@gmail.com'
    version: ${}
springfox:
    documentation:
        swagger:
            enable: true
            v2:
                use-model-v3: true
        swagger-ui:
            base-url: /
#<><><><><><><><><><><><><><> MENSAJES DEL SERVICIO <><><><><><><><><><><><><><>
messages:
    user:
        solicitud-nula-vacia: 'Datos de solicitud vacios o nulos'
        login-vacio-nulo: 'Alias de usuario vacio o nulo'
        clave-vacia-nula: 'Clave de usuario vacia o nula'
        usuario-creado: 'Usuario creado satisfactoriamente'
        usuario-existe: 'El alias ingresado ya existe'
        usuario-invalido: 'El alias ingresado no cumple los valores permitidos'
        clave-no-permitida: 'La clave ingresada no cumple con los valores requeridos'
        correo-no-valido: 'El correo ingresado no es valido'
        correo-existe: 'El correo ingresado ya existe'
        correo-vacio: 'El correo es vacio o nulo'
        solicitud-exitosa: 'Solicitud realizada con exito'
        sin-datos: 'No existe datos de usuarios'
    service:
        general:
            ok: 'OK'
            nok: 'No Encontrado'
            not-authorized: 'No Autorizado'
            error: 'Error interno de servidor'
